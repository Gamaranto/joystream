# This is sample SDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker

enum Language {
  Chinese
  English
  Arabic
  Portugese
  French
}

type Member {
  ID:ID!
  handle: String! @fake(type: fullName, locale: en)
  
}

type Channel {

  id: ID! @fake(type:uuid)

  # Id of underlying entity.
  entityID: String! @fake(type: uuid)

  owner: Member!

  handle: String! @fake(type: companyName)

  description: String! @fake(type: companyCatchPhrase)

  coverPhotoURL: String! @fake(type:imageUrl)

  avatarPhotoURL: String!@fake(type: avatarUrl)

  isPublic: Boolean!

  isCurated: Boolean! 

  language: Language

  videos: [Video!] @listLength(min:24, max:48)
}

type Category {

  id: ID!

  # Id of underlying entity.
  entityID: String! @fake(type: uuid)

  name: String!

  videos: [Video!]
}

type JoystreamVideoMediaLocation {
  dataObjectID: String! @fake(type:uuid)
}

type HTTPVideoMediaLocation {
  host: String!
  port: Int
}

# In the future we can add IPFS, Dat, etc.
union MediaLocation = JoystreamVideoMediaLocation | HTTPVideoMediaLocation

# Mixed both encoding and containers, only having popular combos, may need to be changed later.
enum VideoMediaEncoding {
  H264_mpeg4
  VP8_WEBM
  Theroa_Vorbis
}

# Apparently there are lots of different Creative Commons licenses,
# read about all here https://creativecommons.org/licenses/,
# I haven't had the time.
enum CreativeCommonsVersion {
  CC_BY
  CC_BY_SA
  CC_BY_ND
  CC_BY_NC
  CC_BY_NC_SA
  CC_BY_NC_ND
}

type CreativeCommonsLicense {
  version: CreativeCommonsVersion
}

type UserDefinedLicense {
  text: String!
}

union License = UserDefinedLicense | CreativeCommonsLicense

type VideoMedia {

  id: ID!

  # Id of underlying entity.
  entityID: String! @fake(type: uuid)

  encoding: VideoMediaEncoding!

  # Resolution width
  pixelWidth: Int!

  # Resolution height
  pixelHeight: Int!

  # Size in bytes
  size: Float @fake(type: number, options:{
    minNumber: 100000000
    maxNumber: 10000000000
  })

  # where to find
  location: MediaLocation!
}

type Video {

  id: ID!

  # Id of underlying entity.
  entityID: String!

  channel: Channel!

  category: Category!

  title: String!

  description: String!

  # In seconds
  duration: Int!

  # In intro
  skippableIntroDuration: Int

  thumbnailURL: String!

  Language: Language

  media: VideoMedia!

  hasMarketing: Boolean

  # Timestamp of block
  publishedOnJoystreamAtblockHeight: Float! @fake(type: number,options:{
    minNumber: 50000
  })
  publishedOnJoystreamAtTimeStamp: String! @fake(type: date)

  # Possible time when video was published before Joystream
  publishedBeforeJoystream: String @fake(type: pastDate)

  isPublic: Boolean!

  isCurated: Boolean!

  isExplicit: Boolean!

  license: License!
}

union FreeTextSearchResultItemType = Video | Channel

type FreeTextSearchResult {

   item: FreeTextSearchResultItemType!

   rank: Int!
}

type Query {

  # Lookup a channel by its ID
  channel(id: ID!): Channel

  # List all channel by given constraints
  channels(order_by_creation_date: Boolean, ignore_curated: Boolean, ignore_non_public: Boolean, offset: Int, limit: Int): [Channel!]

  # Lookup a channel by its ID
  category(id: ID!): Category

  # List all categories
  categories: [Category!]

  # Lookup video by its ID
  video(id: ID!): Video

  # List all videos by given constraints
  videos(order_by_publication_date: Boolean, ignore_curated: Boolean, ignore_non_public: Boolean, in_category_with_ID: ID, offset: Int, limit: Int): [Video!]

  # List all top trending videos
  featured_videos: [Video!]

  # Free text search across videos and channels
  search(query_string: String!): [FreeTextSearchResult!]
}